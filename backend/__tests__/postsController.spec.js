import mssql from 'mssql'
import {v4 as uuid} from 'uuid';

import { allikesPost, currentUserPost, deletePost, getAllPosts, getOnePost, likePost, newPost, updatePost } from '../controllers/postsController'
 
const res = {
    status: jest.fn().mockReturnThis(),
    json: jest.fn().mockReturnThis()
}

jest.mock('uuid', ()=>({v4: (()=> '123456789')}))

describe('Creating a new post', ()=>{
    const req = {
        body: {
            userid: "myid",
            postwords: "Hello guys, is everything okay",
            postpic: "www.url.com"
        }
    }
    // const postid = 'postid'
    it('should create a new post well', async()=>{
        const mockedInput = jest.fn().mockReturnThis()//for chained inputs on after the request pool connection succesfull
        const mockedExecute = jest.fn().mockResolvedValue({rowsAffected: [1]})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)

        await newPost(req, res)
        //post id will be generated by the uuid mock above the suites
        expect(mockedInput).toHaveBeenCalledWith('postid', mssql.VarChar, '123456789')
        expect(mockedInput).toHaveBeenCalledWith('userid', mssql.VarChar, req.body.userid)
        expect(mockedInput).toHaveBeenCalledWith('postwords', mssql.VarChar, req.body.postwords)
        expect(mockedInput).toHaveBeenCalledWith('postpic', mssql.VarChar, req.body.postpic)
        expect(res.status).toHaveBeenCalledWith(200)
        expect(res.json).toHaveBeenCalledWith({message: "post added successfully"})
    })
    it('should return a validation error due to missing userid', async()=>{
        const req = {
            body:{
                postwords: "Hello guys, is everything okay",
                postpic: "www.url.com" 
            }
        }
        await newPost(req, res)
        expect(res.json).toHaveBeenCalledWith({
            error: "\"userid\" is required"
          })
        expect(res.status).toHaveBeenCalledWith(422)
    })
    it('should return an error if the user does not exist in the records', async()=>{
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({rowsAffected: [0]})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)

        await newPost(req, res)
        expect(mockedInput).toHaveBeenCalledWith('postid', mssql.VarChar, '123456789')
        expect(mockedInput).toHaveBeenCalledWith('userid', mssql.VarChar, req.body.userid)
        expect(mockedInput).toHaveBeenCalledWith('postwords', mssql.VarChar, req.body.postwords)
        expect(mockedInput).toHaveBeenCalledWith('postpic', mssql.VarChar, req.body.postpic)
        expect(res.status).toHaveBeenCalledWith(400)
        expect(res.json).toHaveBeenCalledWith({message: "The user does not exist in our records"})
    })
    it('should return an error if the there is a wrong input parameter in the request', async()=>{
        const req = {
            body: {
                userid: 78,
                postwords: "Hello guys, is everything okay",
                postpic: "www.url.com"
            }
        }
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({rowsAffected: [0]})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)

        await newPost(req, res)
        expect(res.json).toHaveBeenCalledWith({error: "\"userid\" must be a string"})
        expect(res.status).toHaveBeenCalledWith(422)
    })
})

describe('Getting all posts', ()=>{
    const req = {
        params: {userid: 'falseuserid'}
    }
    const allposts = [
        {
            postid: "c4917c21-e5eb-4e84-af65-3561e5d57771",
            userid: "62c7c30c-05fa-45ab-9c2f-be40fcf42cff",
            username: "Ngatia Mwai",
            profilepic: null,
            postwords: "",
            createdat: "2023-09-19T11:38:24.980Z",
            curuserliked: null,
            likes: 0,
            comments: 0,
            postpic: "https://images.pexels.com/photos/18184113/pexels-photo-18184113/free-photo-of-man-posing-with-llama.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load"
          },
          {
            postid: "cuhcksjcjsklchcs",
            userid: "6kc;lsjskk;lcs;l ks'l nksn s;l ; ;s",
            username: "Ngatia moi",
            profilepic: "picture.com",
            postwords: "hey hejchuc",
            createdat: "2023-09-19T11:38:24.980Z",
            curuserliked: null,
            likes: 89,
            comments: 3,
            postpic: "https://images.suras.com/pictures/18184113/pexels-photo-18184113/free-photo-of-man-posing-with-llama.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load"
          }
    ]
    it ('should return a list of all posts', async()=>{
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({recordset: allposts})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)
        await getAllPosts(req, res)

        expect(res.json).toHaveBeenCalledWith({allPosts: allposts})
        expect(res.status).toHaveBeenCalledWith(200)
    })
})

describe('Getting one post', ()=>{
    const onepost = [
        {
          postid: "3b117a77-1a15-4587-93a3-2a1ec84a9fd7",
          userid: "c6c442ac-06dd-4465-ba98-143d14a4827d",
          username: "Melisa Ruth",
          profilepic: "https://images.pexels.com/photos/774095/pexels-photo-774095.jpeg?auto=compress&cs=tinysrgb&w=600",
          postwords: "Lukas is watching the sunset",
          postpic: "https://images.pexels.com/photos/1386604/pexels-photo-1386604.jpeg?auto=compress&cs=tinysrgb&w=600",
          curuserliked: null,
          likes: 1,
          comments: 1
        }
      ]
    const req = {
        params: {postid: 'samplepostid'},
        body: {userid: 'sampleuserid'}
    }
    it('should get one post', async()=>{
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({recordset: onepost})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)

        await getOnePost(req,res)
        expect(res.json).toHaveBeenCalledWith({onePost: onepost})
        expect(res.status).toHaveBeenCalledWith(200)
    })
})

describe('Current user post', ()=>{
    const req = {
        params: {userid: "sampleuserid"}
    }
    const alluserPosts =  [
        {
          postid: "4bb40ad2-9284-4c86-99d8-0dbaa9324de8",
          userid: "b071d73e-9c0d-4463-986a-74c7f8f89557",
          postwords: "",
          postpic: "http://res.cloudinary.com/dzuzy670c/image/upload/v1694680617/xdjiay504twjip8cgmw7.png",
          createdat: "2023-09-14T11:37:05.037Z",
          isdeleted: false
        },
        {
          postid: "60bc8010-5336-4410-afb7-5ce7ad7839c0",
          userid: "b071d73e-9c0d-4463-986a-74c7f8f89557",
          postwords: "hey brooother, do you need one another",
          postpic: "",
          createdat: "2023-09-14T11:35:59.643Z",
          isdeleted: false
        }
      ]

    it('should get current users post', async()=>{
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({recordset: alluserPosts})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)
        
        await currentUserPost(req, res)
        expect(res.json).toHaveBeenCalledWith({alluserPosts: alluserPosts})
        expect(res.status).toHaveBeenCalledWith(200)

    })
})

describe('delete post', ()=>{
    const req = {
        params: {postid: "samplepostid"}
    }
    it('should delete a post successfully', async()=>{
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({rowsAffected: [1]})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)

        await deletePost(req, res)

        expect(res.json).toHaveBeenCalledWith({message: "post deleted successfully"})
        expect(res.status).toHaveBeenCalledWith(200)
    })

    it('should fail to delete a post', async()=>{
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({rowsAffected: [0]})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)

        await deletePost(req, res)

        expect(res.json).toHaveBeenCalledWith({message: "The post does not exist"})
        expect(res.status).toHaveBeenCalledWith(400)     
    })
})

describe('updating a post', ()=>{
    const req = {
        params: {postid: 'samplepostid'},
        body: {
            postwords: "here are my sample post words",
            postpic: "www.link.postpic.com"
            }
    }
    it('should update the post safely', async()=>{
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({rowsAffected: [1]})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)

        await updatePost(req,res)

        expect(mockedInput).toHaveBeenCalledWith('postid', mssql.VarChar, req.params.postid)
        expect(mockedInput).toHaveBeenCalledWith('postwords', mssql.VarChar, req.body.postwords)
        expect(mockedInput).toHaveBeenCalledWith('postpic', mssql.VarChar, req.body.postpic)
 
        expect(res.json).toHaveBeenCalledWith({message: "post updated successfully"})
        expect(res.status).toHaveBeenCalledWith(200) 

    })
    it("should return an error if the post does not exist", async()=>{
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({rowsAffected: [0]})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)

        await updatePost(req,res)

        expect(mockedInput).toHaveBeenCalledWith('postid', mssql.VarChar, req.params.postid)
        expect(mockedInput).toHaveBeenCalledWith('postwords', mssql.VarChar, req.body.postwords)
        expect(mockedInput).toHaveBeenCalledWith('postpic', mssql.VarChar, req.body.postpic)
 
        expect(res.json).toHaveBeenCalledWith({error: "The post does not exist"})
        expect(res.status).toHaveBeenCalledWith(400)
    })
})

describe('Like or unlike a post', ()=>{
    const req = {
        body: {
            postid: "samplepostid",
            userid: "sampleuserid"
        }
    }

    it('should unlike a post', async()=>{
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({rowsAffected: [1]})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)

        await likePost(req, res)
        expect(mockedInput).toHaveBeenCalledWith('userid', mssql.VarChar, req.body.userid)
        expect(mockedInput).toHaveBeenCalledWith('postid', mssql.VarChar, req.body.postid)
 
        expect(res.json).toHaveBeenCalledWith({likeid: []})
        expect(res.status).toHaveBeenCalledWith(200)
    })

    // it('should like a post', async()=>{

    
    // })

    it('should return an error if the user or post does not exist', async()=>{
        const mockedInput = jest.fn().mockReturnThis()
        const mockedExecute = jest.fn().mockResolvedValue({rowsAffected: 0})

        const mockedRequest ={
            input: mockedInput,
            execute: mockedExecute

        }
        const mockedPool = {
            request: jest.fn().mockReturnValue(mockedRequest)
        }

        jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)

        await likePost(req, res)

        expect(res.json).toHaveBeenCalledWith({message: "The user or post does not exist"})
        expect(res.status).toHaveBeenCalledWith(400)
    })
})

// describe('allikes for a post', ()=>{
//     const req = {
//         params: {postid: "samplepostid"}
//     }
//     const output = [{
//         allikes: 8
//     }]
//     it('Should generate all likes for a post', async()=>{
//         const mockedInput = jest.fn().mockReturnThis()
//         const mockedExecute = jest.fn().mockResolvedValue({recordset: output})

//         const mockedRequest ={
//             input: mockedInput,
//             execute: mockedExecute

//         }
//         const mockedPool = {
//             request: jest.fn().mockReturnValue(mockedRequest)
//         }

//         jest.spyOn(mssql, 'connect').mockResolvedValue(mockedPool)
//         await allikesPost(req,res)
//         expect(res.json).toHaveBeenCalledWith({allPostLikes: output[0].allikes})
//         expect(res.status).toHaveBeenCalledWith(200)
//     })
// })

